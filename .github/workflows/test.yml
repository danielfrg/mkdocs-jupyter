name: test

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 5 * * *"

jobs:
  test:
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7, 3.8, 3.9]
        node-version: ["16"]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      - name: Install Task
        uses: arduino/setup-task@v1

      # ------------------------------------------------------------------------
      # JS

      - name: JS - Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: JS - Load cached node_modules
        id: cached-node_modules
        uses: actions/cache@v2
        with:
          path: js/node_modules
          key: node_modules-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('js/package*.json') }}

      - name: JS - Install JS deps
        if: steps.cached-node_modules.outputs.cache-hit != 'true'
        run: |
          task npm-install

      - name: JS - Build JS
        run: |
          task npm-build

      # ------------------------------------------------------------------------
      # Python

      - name: Python - Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Python - Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.1.12
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Python - Load cached venv
        id: cached-python-env
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-1

      - name: Python - Ensure cache is healthy
        id: cached-python-env-check
        continue-on-error: true
        if: steps.cached-python-env.outputs.cache-hit == 'true'
        run: |
          .venv/bin/activate/bin/python --version
          # poetry run python --version

      - name: Python - Debug variables
        run: |
          echo ${{ steps.cached-python-env.outputs.cache-hit }}
          echo ${{ steps.cached-python-env-check.outcome }}

      - name: Python - Install Python dependencies
        if: steps.cached-python-env.outputs.cache-hit != 'true' || steps.cached-python-env-check.outcome != 'success'
        run: |
          rm -rf .venv || true
          poetry install --no-interaction --no-root

      - name: Python - Print Python info
        run: |
          source .venv/bin/activate
          which python
          python --version
          which pip
          pip --version
          pip freeze

      # ------------------------------------------------------------------------
      # Test

      - name: Build package
        run: |
          source .venv/bin/activate
          task pkg

      - name: Install package
        run: |
          source .venv/bin/activate
          pip install dist/*.tar.gz
          pip freeze

      - name: Run tests
        run: |
          source .venv/bin/activate
          task test-all
          task report

      - name: Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./coverage.xml

      - name: Upload test results to GitHub
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: test-results-py${{ matrix.python-version }}
          path: htmlcov
