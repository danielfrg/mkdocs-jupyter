name: test

on:
  push:
    branches: [main]
  pull_request:
  schedule:
    - cron: "0 5 * * *"
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        node-version: ["16"]

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow

      # ------------------------------------------------------------------------
      # JS

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Load cached node_modules
        id: cached-node_modules-dependencies
        uses: actions/cache@v2
        with:
          path: js/node_modules
          key: node_modules-${{ runner.os }}-${{ matrix.node-version }}-${{ hashFiles('js/package*.json') }}

      - name: Install JS deps
        if: steps.cached-node_modules-dependencies.outputs.cache-hit != 'true'
        run: |
          make npm-install

      - name: Build JS Styles
        run: |
          make npm-build

      # ------------------------------------------------------------------------
      # Python env

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.2.0a2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.jupyter-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Python dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: |
          poetry install --no-interaction --no-root --with test

      - name: Print Python info
        run: |
          source .venv/bin/activate
          which python
          python --version
          which pip
          pip --version

      # ------------------------------------------------------------------------
      # Test

      - name: Build package
        run: |
          source .venv/bin/activate
          make build

      - name: Build package
        run: |
          source .venv/bin/activate
          make build

      - name: Install package
        run: |
          source .venv/bin/activate
          pip install dist/*.tar.gz
          pip freeze

      - name: Run tests
        run: |
          source .venv/bin/activate
          make test
          make report

      - name: Codecov
        uses: codecov/codecov-action@v1
        with:
          file: ./coverage.xml
